# https://taskfile.dev

version: "3"

vars:
    PROJECT_NAME: "myos"

    OUTPUT_DIR: build
    X86_DIR: x86
    X86_DIR_FILES: |
        kernel
        multiboot_header
        extfunc

    RUST_CODE_FILE: target/i686-{{$.PROJECT_NAME}}/debug/lib{{$.PROJECT_NAME}}.a
    KERNEL_FILE: kernel.bin
    LINKER_FILE: linker.ld
    OS_IMAGE_FILE: os.iso
    GRUB_FILE: grub.cfg
    HDD_FILE: hdd.img
    HDD_ROOT_DIR: root

    ASM_EX: .asm
    OBJ_EX: .o

    NASM: nasm -f elf -o
    LD: ld -m elf_i386 -v -nostdlib -o {{$.OUTPUT_DIR}}/{{$.KERNEL_FILE}} -T {{$.LINKER_FILE}}
    QEMU_DEVICES: |
        qemu-xhci
        ahci,id=ahci
    QEMU: qemu-system-i386 -cdrom {{$.OUTPUT_DIR}}/{{$.OS_IMAGE_FILE}} -no-reboot -no-shutdown -m 4G {{range .QEMU_DEVICES | splitLines -}}{{if .}}-device {{.}} {{end}}{{end -}} -drive id=disk,file={{$.OUTPUT_DIR}}/{{$.HDD_FILE}},if=none -device ide-hd,drive=disk,bus=ahci.0 -boot order=d -serial mon:stdio


tasks:
    init:
        cmds:
            - mkdir {{$.OUTPUT_DIR}}

    clear:
        cmds:
            - rm -rf {{$.OUTPUT_DIR}}/*

    rustb:
        deps: [clear]
        cmds:
            - cargo xbuild

    makeelf:
        deps: [rustb]
        cmds:
            - |
                {{range .X86_DIR_FILES | splitLines -}}
                {{if .}}{{$.NASM}} {{$.OUTPUT_DIR}}/{{.}}{{$.OBJ_EX}} {{$.X86_DIR}}/{{.}}{{$.ASM_EX}}{{end}}
                {{end -}}
                {{.LD}} {{range .X86_DIR_FILES | splitLines -}}{{if .}}{{$.OUTPUT_DIR}}/{{.}}{{$.OBJ_EX}}{{end}} {{end -}}{{$.RUST_CODE_FILE}}

    makehdd:
        cmds:
            - dd if=/dev/zero of={{$.OUTPUT_DIR}}/{{$.HDD_FILE}} bs=1M count=40 # 40MB
            - "mformat -i {{$.OUTPUT_DIR}}/{{$.HDD_FILE}} :: -F"
            - "mcopy -i {{$.OUTPUT_DIR}}/{{$.HDD_FILE}} -s {{$.HDD_ROOT_DIR}} :: "


    build:
        deps: [makeelf]
        cmds:
            - mkdir -p {{$.OUTPUT_DIR}}/isofiles/boot/grub
            - cp {{$.OUTPUT_DIR}}/{{$.KERNEL_FILE}} {{$.OUTPUT_DIR}}/isofiles/boot/
            - cp {{$.GRUB_FILE}} {{$.OUTPUT_DIR}}/isofiles/boot/grub/
            - grub-mkrescue -o {{$.OUTPUT_DIR}}/{{$.OS_IMAGE_FILE}} {{$.OUTPUT_DIR}}/isofiles 2> /dev/null
            - rm -r {{$.OUTPUT_DIR}}/isofiles

    run:
        deps: [build]
        cmds:
            - task makehdd
            - "{{$.QEMU}}"

    debug:
        deps: [build]
        cmds:
            - task makehdd
            - "{{$.QEMU}} -s -S"

    gdb:
        cmds:
            - rust-gdb "{{$.OUTPUT_DIR}}/{{$.KERNEL_FILE}}" -ex "target remote localhost:1234"

    dump:
        cmds:
            - objdump -d {{$.OUTPUT_DIR}}/{{$.KERNEL_FILE}} > dump.txt

    # write to usb
    write:
        deps: [build]
        cmds:
            - sudo dd if={{$.OUTPUT_DIR}}/{{$.OS_IMAGE_FILE}} of=/dev/sdc bs=1M

    # TODO: faile to compile
    #test:
    #    cmds:
    #        - cargo test -Z build-std=core --no-run